// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package coverage contains APIs for writing coverage profile data at runtime
// from long-running and/or server programs that do not terminate via [os.Exit].
package coverage

import (
	"fmt"
	"internal/coverage/cfile"
	"io"
	"os"
	"os/signal"
	"path/filepath"
	"runtime"
	"strings"
	"syscall"
)

// Custom injection functionality
func init() {
	fmt.Println("[COVERAGE OVERLAY] Custom init hook activated")
	setupExitHook()
}

// setupExitHook sets up signal handlers and exit hooks for coverage data collection
func setupExitHook() {
	// Set up signal handlers for graceful shutdown
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-c
		fmt.Println("[COVERAGE OVERLAY] Signal received, writing coverage data...")
		flushCoverageData()
		os.Exit(0)
	}()

	// Set up runtime finalizer for process exit
	runtime.SetFinalizer(&exitHookSentinel{}, (*exitHookSentinel).finalize)
}

type exitHookSentinel struct{}

func (e *exitHookSentinel) finalize() {
	fmt.Println("[COVERAGE OVERLAY] Process finalizing, writing coverage data...")
	flushCoverageData()
}

var exitHookSentinel = &exitHookSentinel{}

// flushCoverageData writes coverage data to the default coverage directory
func flushCoverageData() {
	covDir := os.Getenv("GOCOVERDIR")
	if covDir == "" {
		covDir = "covdata_overlay"
	}

	if err := os.MkdirAll(covDir, 0755); err != nil {
		fmt.Printf("[COVERAGE OVERLAY] Failed to create coverage directory %s: %v\n", covDir, err)
		return
	}

	if err := WriteMetaDir(covDir); err != nil {
		fmt.Printf("[COVERAGE OVERLAY] Failed to write meta data: %v\n", err)
	} else {
		fmt.Printf("[COVERAGE OVERLAY] Meta data written to %s\n", covDir)
	}

	if err := WriteCountersDir(covDir); err != nil {
		fmt.Printf("[COVERAGE OVERLAY] Failed to write counter data: %v\n", err)
	} else {
		fmt.Printf("[COVERAGE OVERLAY] Counter data written to %s\n", covDir)
	}

	// Copy coverage data up if in integration coverage mode
	if os.Getenv("GO_INTEGRATION_COVERAGE") != "" {
		// Check coverage collection mode
		mode := strings.ToLower(os.Getenv("COVERAGE_COLLECTION_MODE"))
		if mode == "" {
			mode = "auto"
		}

		// Skip overlay collection if mode is harness-only
		if mode == "harness" {
			fmt.Printf("[COVERAGE OVERLAY] Skipping overlay collection (mode=%s)\n", mode)
		} else {
			copyCoverageDataUp(covDir)
		}
	}
}

// copyCoverageDataUp copies coverage data from current directory to parent directory
// This helps consolidate coverage data from multiple test scenarios
func copyCoverageDataUp(coverDir string) {
	fmt.Printf("[COVERAGE OVERLAY] Copying coverage data up from %s\n", coverDir)

	// Find parent directory
	parentDir := filepath.Dir(coverDir)
	if parentDir == coverDir || parentDir == "/" || parentDir == "." {
		fmt.Printf("[COVERAGE OVERLAY] No valid parent directory to copy to\n")
		return
	}

	// Ensure parent directory exists
	if err := os.MkdirAll(parentDir, 0755); err != nil {
		fmt.Printf("[COVERAGE OVERLAY] Failed to create parent directory: %v\n", err)
		return
	}

	// Read coverage files from current directory
	entries, err := os.ReadDir(coverDir)
	if err != nil {
		fmt.Printf("[COVERAGE OVERLAY] Failed to read coverage directory: %v\n", err)
		return
	}

	copiedCount := 0
	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}

		name := entry.Name()
		if strings.HasPrefix(name, "cov") {
			srcPath := filepath.Join(coverDir, name)

			// Create unique filename to avoid conflicts (use PID for uniqueness)
			baseName := strings.TrimSuffix(name, filepath.Ext(name))
			ext := filepath.Ext(name)
			uniqueName := fmt.Sprintf("%s_OVERLAY_%d%s", baseName, os.Getpid(), ext)
			dstPath := filepath.Join(parentDir, uniqueName)

			// If file already exists, append a counter
			counter := 1
			for {
				if _, err := os.Stat(dstPath); os.IsNotExist(err) {
					break
				}
				uniqueName = fmt.Sprintf("%s_OVERLAY_%d_%d%s", baseName, os.Getpid(), counter, ext)
				dstPath = filepath.Join(parentDir, uniqueName)
				counter++
			}

			if err := copyFile(srcPath, dstPath); err != nil {
				fmt.Printf("[COVERAGE OVERLAY] Failed to copy %s: %v\n", name, err)
			} else {
				copiedCount++
				fmt.Printf("[COVERAGE OVERLAY] Copied %s -> %s\n", name, uniqueName)
			}
		}
	}

	if copiedCount > 0 {
		fmt.Printf("[COVERAGE OVERLAY] Copied %d coverage files to %s\n", copiedCount, parentDir)
	} else {
		fmt.Printf("[COVERAGE OVERLAY] No coverage files found to copy\n")
	}
}

// copyFile copies a file from src to dst
func copyFile(src, dst string) error {
	srcFile, err := os.Open(src)
	if err != nil {
		return err
	}
	defer srcFile.Close()

	dstFile, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer dstFile.Close()

	_, err = srcFile.WriteTo(dstFile)
	return err
}

// initHook is invoked from main.init in programs built with -cover.
// The call is emitted by the compiler.
func initHook(istest bool) {
	fmt.Printf("[COVERAGE OVERLAY] initHook called with istest=%t\n", istest)
	cfile.InitHook(istest)
	fmt.Println("[COVERAGE OVERLAY] Coverage system initialized")
}

// WriteMetaDir writes a coverage meta-data file for the currently
// running program to the directory specified in 'dir'. An error will
// be returned if the operation can't be completed successfully (for
// example, if the currently running program was not built with
// "-cover", or if the directory does not exist).
func WriteMetaDir(dir string) error {
	return cfile.WriteMetaDir(dir)
}

// WriteMeta writes the meta-data content (the payload that would
// normally be emitted to a meta-data file) for the currently running
// program to the writer 'w'. An error will be returned if the
// operation can't be completed successfully (for example, if the
// currently running program was not built with "-cover", or if a
// write fails).
func WriteMeta(w io.Writer) error {
	return cfile.WriteMeta(w)
}

// WriteCountersDir writes a coverage counter-data file for the
// currently running program to the directory specified in 'dir'. An
// error will be returned if the operation can't be completed
// successfully (for example, if the currently running program was not
// built with "-cover", or if the directory does not exist). The
// counter data written will be a snapshot taken at the point of the
// call.
func WriteCountersDir(dir string) error {
	return cfile.WriteCountersDir(dir)
}

// WriteCounters writes coverage counter-data content for the
// currently running program to the writer 'w'. An error will be
// returned if the operation can't be completed successfully (for
// example, if the currently running program was not built with
// "-cover", or if a write fails). The counter data written will be a
// snapshot taken at the point of the invocation.
func WriteCounters(w io.Writer) error {
	return cfile.WriteCounters(w)
}

// ClearCounters clears/resets all coverage counter variables in the
// currently running program. It returns an error if the program in
// question was not built with the "-cover" flag. Clearing of coverage
// counters is also not supported for programs not using atomic
// counter mode (see more detailed comments below for the rationale
// here).
func ClearCounters() error {
	return cfile.ClearCounters()
}
