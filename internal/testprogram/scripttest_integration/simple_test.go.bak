package main

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"testing"

	"rsc.io/script"
	"rsc.io/script/scripttest"
)

// TestSimpleIntegrationCoverage tests basic multi-level binary execution with coverage
func TestSimpleIntegrationCoverage(t *testing.T) {
	// Enable integration coverage mode
	os.Setenv("GO_INTEGRATION_COVERAGE", "1")
	
	// Setup coverage directory
	coverageDir := filepath.Join(t.TempDir(), "coverage")
	os.Setenv("GOCOVERDIR", coverageDir)
	t.Logf("Coverage data will be collected in: %s", coverageDir)
	
	// Build all our test binaries with coverage
	binaries := buildTestBinariesWithCoverage(t)
	
	// Create curated PATH with our binaries
	binDir := filepath.Dir(binaries["main"])
	curatedPath := binDir + string(os.PathListSeparator) + os.Getenv("PATH")
	
	// Test direct binary execution with coverage
	t.Run("direct_execution", func(subT *testing.T) {
		testCoverDir := filepath.Join(coverageDir, "direct")
		if err := os.MkdirAll(testCoverDir, 0755); err != nil {
			subT.Fatalf("Failed to create coverage directory: %v", err)
		}
		os.Setenv("GOCOVERDIR", testCoverDir)
		defer os.Setenv("GOCOVERDIR", coverageDir)
		
		env := append(os.Environ(),
			"PATH="+curatedPath,
			"GOCOVERDIR="+testCoverDir,
			"GO_INTEGRATION_COVERAGE=1",
		)
		
		// Test main -> cmd1 -> cmd2 -> cmd3 chain
		cmd := exec.Command(binaries["main"], "hello", "DirectTest")
		cmd.Env = env
		output, err := cmd.CombinedOutput()
		if err != nil {
			subT.Fatalf("Direct execution failed: %v\nOutput: %s", err, output)
		}
		
		subT.Logf("Direct execution output:\n%s", output)
		
		// Verify coverage data was collected
		verifyCoverageFiles(subT, testCoverDir, "direct_execution")
	})
	
	// Test scripttest execution with custom commands
	t.Run("scripttest_execution", func(subT *testing.T) {
		testCoverDir := filepath.Join(coverageDir, "scripttest")
		if err := os.MkdirAll(testCoverDir, 0755); err != nil {
			subT.Fatalf("Failed to create coverage directory: %v", err)
		}
		os.Setenv("GOCOVERDIR", testCoverDir)
		defer os.Setenv("GOCOVERDIR", coverageDir)
		
		// Create scripttest engine with our custom commands
		engine := &script.Engine{
			Cmds:  createTestCommands(binaries),
			Conds: scripttest.DefaultConds(),
		}
		
		// Create script state
		ctx := context.Background()
		workDir := subT.TempDir()
		env := append(os.Environ(),
			"PATH="+curatedPath,
			"GOCOVERDIR="+testCoverDir,
			"GO_INTEGRATION_COVERAGE=1",
		)
		
		state, err := script.NewState(ctx, workDir, env)
		if err != nil {
			subT.Fatalf("Failed to create script state: %v", err)
		}
		
		// Execute script that calls our binaries
		scriptContent := `
# Test multi-level binary execution via scripttest
main-tool hello ScriptTest
exec main chain
exec cmd1 process step1
`
		
		subT.Logf("Executing scripttest with coverage collection...")
		scripttest.Run(subT, engine, state, "test.txt", strings.NewReader(scriptContent))
		
		// Verify coverage data was collected
		verifyCoverageFiles(subT, testCoverDir, "scripttest_execution")
	})
	
	// Test recursive execution pattern
	t.Run("recursive_execution", func(subT *testing.T) {
		testCoverDir := filepath.Join(coverageDir, "recursive")
		if err := os.MkdirAll(testCoverDir, 0755); err != nil {
			subT.Fatalf("Failed to create coverage directory: %v", err)
		}
		os.Setenv("GOCOVERDIR", testCoverDir)
		defer os.Setenv("GOCOVERDIR", coverageDir)
		
		env := append(os.Environ(),
			"PATH="+curatedPath,
			"GOCOVERDIR="+testCoverDir,
			"GO_INTEGRATION_COVERAGE=1",
		)
		
		// Test recursive calls: main -> cmd2 -> cmd3 -> main (with depth limiting)
		cmd := exec.Command(binaries["main"], "recursive", "2")
		cmd.Env = env
		output, err := cmd.CombinedOutput()
		if err != nil {
			subT.Fatalf("Recursive execution failed: %v\nOutput: %s", err, output)
		}
		
		subT.Logf("Recursive execution output:\n%s", output)
		
		// Verify coverage data was collected
		verifyCoverageFiles(subT, testCoverDir, "recursive_execution")
	})
	
	// Final verification: check comprehensive coverage collection
	verifyComprehensiveCoverage(t, coverageDir)
}

// buildTestBinariesWithCoverage builds all test binaries with coverage enabled
func buildTestBinariesWithCoverage(t *testing.T) map[string]string {
	t.Helper()
	
	binDir := filepath.Join(t.TempDir(), "bin")
	if err := os.MkdirAll(binDir, 0755); err != nil {
		t.Fatalf("Failed to create bin directory: %v", err)
	}
	
	binaries := make(map[string]string)
	
	buildConfigs := []struct {
		name   string
		srcDir string
	}{
		{"main", "main"},
		{"cmd1", "cmd1"},
		{"cmd2", "cmd2"},
		{"cmd3", "cmd3"},
	}
	
	for _, config := range buildConfigs {
		binaryPath := filepath.Join(binDir, config.name)
		if runtime.GOOS == "windows" {
			binaryPath += ".exe"
		}
		
		// Get absolute path to source directory
		wd, err := os.Getwd()
		if err != nil {
			t.Fatalf("Failed to get working directory: %v", err)
		}
		srcPath := filepath.Join(wd, config.srcDir)

		t.Logf("Building %s from %s to %s", config.name, srcPath, binaryPath)

		// Build with coverage enabled
		cmd := exec.Command("go", "build", "-cover", "-o", binaryPath, srcPath)
		cmd.Stderr = os.Stderr
		if err := cmd.Run(); err != nil {
			t.Fatalf("Failed to build %s: %v", config.name, err)
		}
		
		binaries[config.name] = binaryPath
	}
	
	return binaries
}

// createTestCommands creates scripttest commands for testing
func createTestCommands(binaries map[string]string) map[string]script.Cmd {
	cmds := scripttest.DefaultCmds()
	
	// Add main-tool command
	cmds["main-tool"] = script.Command(
		script.CmdUsage{
			Summary: "call main program as a tool",
			Args:    "operation [args...]",
		},
		func(s *script.State, args ...string) (script.WaitFunc, error) {
			if len(args) < 1 {
				return nil, fmt.Errorf("main-tool requires at least one argument")
			}
			
			cmd := exec.Command(binaries["main"], args...)
			cmd.Dir = s.Getwd()
			cmd.Env = s.Environ()
			
			return func(s *script.State) (stdout, stderr string, err error) {
				var outBuf, errBuf strings.Builder
				cmd.Stdout = &outBuf
				cmd.Stderr = &errBuf
				err = cmd.Run()
				return outBuf.String(), errBuf.String(), err
			}, nil
		},
	)
	
	return cmds
}

// verifyCoverageFiles verifies that coverage files were created
func verifyCoverageFiles(t *testing.T, coverageDir, testName string) {
	t.Helper()
	
	if _, err := os.Stat(coverageDir); os.IsNotExist(err) {
		t.Errorf("Coverage directory does not exist: %s", coverageDir)
		return
	}
	
	entries, err := os.ReadDir(coverageDir)
	if err != nil {
		t.Errorf("Failed to read coverage directory: %v", err)
		return
	}
	
	var metaFiles, counterFiles []string
	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}
		
		name := entry.Name()
		if strings.HasPrefix(name, "covmeta.") {
			metaFiles = append(metaFiles, name)
		} else if strings.HasPrefix(name, "covcounters.") {
			counterFiles = append(counterFiles, name)
		}
	}
	
	t.Logf("Test %s: Found %d meta files and %d counter files", testName, len(metaFiles), len(counterFiles))
	
	// Log details about what we found
	for _, file := range append(metaFiles, counterFiles...) {
		if info, err := os.Stat(filepath.Join(coverageDir, file)); err == nil {
			t.Logf("Coverage file: %s (size: %d bytes)", file, info.Size())
		}
	}
	
	// Note: We might not have coverage files if the overlay isn't working correctly
	// That's part of what we're testing
	if len(metaFiles) == 0 && len(counterFiles) == 0 {
		t.Logf("Warning: No coverage files found for test %s", testName)
	}
}

// verifyComprehensiveCoverage provides a summary of all coverage collection
func verifyComprehensiveCoverage(t *testing.T, coverageDir string) {
	t.Helper()
	
	t.Logf("=== Coverage Collection Summary ===")
	
	var allFiles []string
	err := filepath.Walk(coverageDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && (strings.HasPrefix(info.Name(), "cov")) {
			allFiles = append(allFiles, path)
		}
		return nil
	})
	
	if err != nil {
		t.Errorf("Failed to walk coverage directory: %v", err)
		return
	}
	
	t.Logf("Total coverage files found: %d", len(allFiles))
	
	if len(allFiles) > 0 {
		t.Logf("✅ SUCCESS: Coverage data was collected from multi-level binary execution")
		for _, file := range allFiles {
			relPath, _ := filepath.Rel(coverageDir, file)
			if info, err := os.Stat(file); err == nil {
				t.Logf("  - %s (%d bytes)", relPath, info.Size())
			}
		}
	} else {
		t.Logf("⚠️  No coverage files found - overlay may not be working correctly")
	}
}